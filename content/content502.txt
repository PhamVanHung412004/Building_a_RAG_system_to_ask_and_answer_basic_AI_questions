AI VIETNAM aivietnam.edu.vn
là câu trả lời của mô hình, ứng với trường "response"của bộ dữ liệu. Vì vậy, ta sẽ xây dựng
hàm để đưa vào đúng khuôn format như sau:
1 def generate_prompt(question, choices, explanation):
2 return f"""
3 <|im_start|>system
4 Bạn là một chuyên gia về toán. Bạn sẽ nhận câu hỏi trắc nghiệm kèm theo các l
ựa chọn, hãy giải step by step nếu có và chọn phương án đúng.
5
6 <|im_start|>user
7 ### Câu hỏi:
8 {question}
9 ### Các lựa chọn:
10 {choices}
11 ### Câu trả lời:
12
13 <|im_start|>assistant
14 {explanation}
15 """.strip()
16
17 def generate_and_tokenize_prompt(question, choices, explanation):
18 full_prompt = generate_prompt(question, choices, explanation)
19 tokenized_full_prompt = tokenizer(
20 full_prompt,
21 padding=True,
22 truncation=True
23 )
24
25 return tokenized_full_prompt
(b) Xây dựng hàm tokenization:Đối với bất kì mô hình ngôn ngữ lớn nào, để xử lý một văn
bản nào, trước hết chúng ta cần thực hiện tokenization lên văn bản đó. Hiểu một cách đơn
giản, chúng ta sẽ đưa văn bản từ dạng string thành một list (vector) các con số:
Ở đây, ta sẽ thiết kế hàm tạo câu prompt với điểm dữ liệu gồm cặp (response, prompt) đầu
vào, sau đó thực hiện tokenize câu prompt, code cài đặt như sau:
1 def generate_and_tokenize_prompt(question, choices, explanation):
2 full_prompt = generate_prompt(question, choices, explanation)
3 tokenized_full_prompt = tokenizer(
4 full_prompt,
5 padding=True,
6 truncation=True
7 )
8
9 return tokenized_full_prompt
(c) Áp dụng tokenization vào bộ dữ liệu:Với hàm tokenization vừa xây dựng, ta sử dụng
đoạn code sau đây để tách các thông tin về các lựa chọn trắc nghiệm (choices), lời giải thích
kèm đáp án (explanation) và câu hỏi (question). Sau đó, đưa các thông tin này vào hàm
tokenization để hình thành câu prompt cho mô hình. 