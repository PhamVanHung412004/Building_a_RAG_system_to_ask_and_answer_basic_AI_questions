<<<<<<< HEAD
Node ID: c06a65fa-67a1-4e70-b481-72f50abc4c55
Text: Điều này bao gồm việc xác định vị trí bắt đầu và kết thúc tốt
nhất cho các câu trả lời và đánh giá xem chúng có hợp lệ hay không dựa
trên độ dài tối đa cho câu trả lời. Cuối cùng, hàm tính toán các độ đo
và trả về kết quả đánh giá mô hình hỏi đáp dựa trên các câu trả lời dự
đoán và câu trả lời lý thuyết từ ví dụ. 1 N_BEST = 20 # Số lượng kết
quả...
=======
Điều này bao gồm việc xác định vị trí bắt đầu và kết thúc tốt
nhất cho các câu trả lời và đánh giá xem chúng có hợp lệ hay không dựa trên độ dài tối đa
cho câu trả lời. Cuối cùng, hàm tính toán các độ đo và trả về kết quả đánh giá mô hình hỏi
đáp dựa trên các câu trả lời dự đoán và câu trả lời lý thuyết từ ví dụ.
1 N_BEST = 20 # Số lượng kết quả tốt nhất được lựa chọn sau khi dự đoán
2 MAX_ANS_LENGTH = 30 # Độ dài tối đa cho câu trả lời dự đoán
3
4 def compute_metrics(start_logits, end_logits, features, examples):
5 # Tạo một từ điển mặc định để ánh xạ mỗi ví dụ
6 # với danh sách các đặc trưng tương ứng
7 example_to_features = collections.defaultdict(list)
8 for idx, feature in enumerate(features):
9 example_to_features[feature[’example_id’]].append(idx)
10
11 predicted_answers = []
12 for example in tqdm(examples):
13 example_id = example[’id’]
14 context = example[’context’]
15 answers = []
16
17 # Lặp qua tất cả các đặc trưng liên quan đến ví dụ đó
18 for feature_index in example_to_features[example_id]:
19 start_logit = start_logits[feature_index]
20 end_logit = end_logits[feature_index]
21 offsets = features[feature_index][’offset_mapping’]
22
23 # Lấy các chỉ số có giá trị lớn nhất cho start và end logits
24 start_indexes = np.argsort(start_logit)[-1:-N_BEST-1:-1].tolist()
25 end_indexes = np.argsort(end_logit)[-1:-N_BEST-1:-1].tolist()
26 for start_index in start_indexes:
27 for end_index in end_indexes:
28 # Bỏ qua các câu trả lời
29 # không hoàn toàn nằm trong ngữ cảnh
30 if offsets[start_index] is None or \
31 offsets[end_index] is None:
32 continue
33 # Bỏ qua các câu trả lời có độ dài > max_answer_length
34 if end_index - start_index + 1 > MAX_ANS_LENGTH:
35 continue
36
37 # Tạo một câu trả lời mới
38 text = context[
39 offsets[start_index][0]:offsets[end_index][1]
40 ]
41 logit_score = start_logit[start_index] + \
42 end_logit[end_index]
43 answer = {
44 ’text’: text,
45 ’logit_score’: logit_score,
46 }
47 answers.append(answer)
48
49 # Chọn câu trả lời có điểm số tốt nhất
50 if len(answers) > 0:
51 best_answer = max(answers, key=lambda x: x[’logit_score’])
9
>>>>>>> HEAD@{1}
