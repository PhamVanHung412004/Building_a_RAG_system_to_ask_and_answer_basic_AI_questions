Introduction to Text 
Generation
AI VIETNAM
All-In-One Course
➢Problem Introduction
➢Simple Examples
➢Code Implementation
Outline
Problem Introduction
AI VIETNAM
All-In-One Course
❖Definition
Text generation is the process of using a computer program or algorithm to 
automatically create human-like text based on certain inputs. Techniques range from 
rule-based systems to advanced AI models like LSTMs and Transformers
INPUT
Inputs can vary from simple prompts or seed text to more complex data like 
keywords, structured information, or images, which the model uses to 
generate relevant text.
OUTPUT
The output is the coherent and contextually relevant text generated by the 
model, which aims to mimic human writing for various applications
Problem Introduction
AI VIETNAM
All-In-One Course
❖Definition
The task is to predict what word comes next.
●Input: a sequence of words 
●Output:  The most probable next word
∊
Example:
- The students opened their → books
- He was good at → basketball
- I enjoyed reading this → books
- He was a part→ of
Problem Introduction
AI VIETNAM
All-In-One Course
❖Why Text Generation?
Application Area
Description
Content Creation
Generating articles, blog posts, stories, and poetry to assist in creative writing and content development.
Customer Service Automation
Powering chatbots and virtual assistants to provide instant responses to customer inquiries, improving service efficiency.
Language Translation
Providing rough translations between languages, useful for less commonly spoken languages with scarce resources.
Programming Assistance
Generating code snippets, explaining code, and offering debugging suggestions to speed up software development.
Educational Tools
Creating educational content like summaries, quizzes, and explanatory notes tailored to students' understanding levels.
Email and Communication Assistance
Assisting in drafting emails, reports, and presentations with appropriate tone and style for the audience.
Problem Introduction
AI VIETNAM
All-In-One Course
❖n-gram
●Definition: A n-gram is a chunk of n consecutive words
○unigrams: “the”, “students”, “opened”, ”their”
○bigrams: “the students”, “students opened”, “opened their”
○trigrams: “the students opened”, “students opened their”
○4-grams: “the students opened their”
●Idea:  Collect statistics about how frequent different n-grams are, and use these to 
predict next word.
Problem Introduction
AI VIETNAM
All-In-One Course
❖n-gram
Simple Examples
❖Text Generation Model
AI VIETNAM
All-In-One Course
Simple Examples
❖Text Generation Model
AI VIETNAM
All-In-One Course
Transformer
RNN
…
Simple Examples
❖Evaluation Metric
●Precision and Recall of Words
AI VIETNAM
All-In-One Course
Simple Examples
❖Evaluation Metric
●BLEU Score
AI VIETNAM
All-In-One Course
Simple Examples
❖Evaluation Metric
●Precision and Recall of Words
AI VIETNAM
All-In-One Course
Code Implementation
❖Text Generation Code Overview
0: Import Library 
1: Data Preparation
2: Modeling
4: Plot Results
3: Train and 
Evaluate
2
Split Data
3
Tokenizer
1
Load Raw Data
4
Pad and Truncate
2
Build Model
1
Conﬁg Model
2
Evaluate model
1
Train model
2
Train/Test Acc
1
Train/Test Loss
AI VIETNAM
All-In-One Course
Code Implementation
❖Text Generation Code Overview
0: Import Library 
1: Data Preparation
2: Modeling
4: Plot Results
3: Train and 
Evaluate
3
Tokenizer
1
Load Raw Data
4
Pad and Truncate
2
Build Model
1
Conﬁg Model
2
Split Data
2
Evaluate model
1
Train model
2
Train/Test Acc
1
Train/Test Loss
AI VIETNAM
All-In-One Course
Code Implementation
❖Import Library
import torch: Imports PyTorch, a library for tensor computation and deep learning.
import torch.nn as nn : Brings in 
PyTorch's neural network module, aliased 
as nn, for building network layers.
from torchtext.data.utils import 
get_tokenizer: This function is used 
to split text into tokens (e.g., words or 
subwords), which is a common 
preprocessing step in NLP.
AI VIETNAM
All-In-One Course
from torchtext.vocab import build_vocab_from_iterator :  
This function is used to build a vocabulary from an iterator. The 
vocabulary maps tokens (words) to indices and is used to convert text 
data into numerical form that can be processed by neural networks. 
import matplotlib.pyplot as plt : is a 
library for creating static, interactive, and 
animated visualizations in Python
Code Implementation
❖Data Preparation
AI VIETNAM
All-In-One Course
Code Implementation
❖Data Preparation
AI VIETNAM
All-In-One Course
Deﬁnes a list named `corpus` containing two phrases. This 
serves as the dataset for this example.
Conﬁguration for dataset and modeling. 
- Calculates the size of the corpus by counting the 
number of items in the list and stores it in `data_size`
- Sets the maximum size of the vocabulary to 12. This 
means only the ﬁrst 12 unique tokens will be considered 
in the vocabulary.
- Deﬁnes the sequence length as 5, meaning that 
inputs/outputs will be processed or generated in chunks 
of 5 tokens at a time.
Deﬁnes the tokenizer: This tokenizer splits text into words, 
lowercasing, and removing punctuation.
Deﬁnes a generator function `yield_tokens` that takes an 
iterable of text examples (such as sentences) and yields 
lists of tokens for each example.
Code Implementation
❖Data Preparation
AI VIETNAM
All-In-One Course
Creates a vocabulary from the tokenized data and then 
conﬁgures the vocabulary to handle unknown tokens.
It limits the vocabulary to vocab_size most frequent tokens
and includes special tokens <unk> for unknown words and 
<pad> for padding.
- Sets the default index for the vocabulary to be the index of 
the <unk> token (any token not found in the vocabulary will 
be treated as an unknown token)
- Retrieves the mapping of tokens to indices from the 
vocabulary and prints it.
Code Implementation
❖Data Preparation
AI VIETNAM
All-In-One Course
Vocab
Code Implementation
❖Text Generation Example
AI VIETNAM
All-In-One Course
INPUT
LABEL
ăn quả nhớ kẻ trồng cây
Code Implementation
❖Text Generation Example
AI VIETNAM
All-In-One Course
INPUT
LABEL
ăn quả nhớ kẻ trồng cây
Code Implementation
❖Text Generation Example
AI VIETNAM
All-In-One Course
INPUT
LABEL
ăn quả quên kẻ trồng cây
Code Implementation
❖Text Generation Example
AI VIETNAM
All-In-One Course
INPUT
LABEL
có chí thì nên
Code Implementation
❖Text Generation Example
AI VIETNAM
All-In-One Course
INPUT
LABEL
có chí thì nên
Code Implementation
❖Text Generation Example
AI VIETNAM
All-In-One Course
ăn quả nhớ kẻ trồng cây
Step1: Build Training Data
Step2: Convert to ID
Step3: Pad and Truncate
Code Implementation
❖Data Preparation
AI VIETNAM
All-In-One Course
Step1: Build Training Data
-
Processes the corpus to create training data 
(data_x and data_y) for a sequence prediction task
-
Each sentence in the corpus is split into words
-
For each preﬁx of words in a sentence, it creates 
an input sequence (data_x) and the corresponding 
next word in the sequence (data_y)
Step2 & 3: Convert to ID & Pad and Truncate
-
Deﬁnes a function vectorize to convert 
input sequences (x) and target words (y) 
into their numerical representations using a 
given vocabulary (vocab)
-
All input sequences are padded or 
truncated to a speciﬁed length 
(sequence_length)
Applies this function to each pair of input 
sequence and target word in data_x and data_y, 
creating lists of numericalized inputs 
(data_x_ids) and targets (data_y_ids).
Code Implementation
❖Text Generation Model
Input (x)
Embedding
fc
AI VIETNAM
All-In-One Course
RNN LAYER
Code Implementation
❖Text Generation Model
AI VIETNAM
All-In-One Course
Code Implementation
❖Compile and Train
AI VIETNAM
All-In-One Course
Code Implementation
❖Inference
AI VIETNAM
All-In-One Course
Processing a prompt example
>> OUTPUT: [4, 2, 1, 1, 1]
Inference
>> OUTPUT: [4, 2, 9, 1, 1]
>> OUTPUT: [4, 2, 9, 7, 1]
>> OUTPUT: [4, 2, 9, 7, 10]
Code Implementation
❖Plot Results
AI VIETNAM
All-In-One Course
