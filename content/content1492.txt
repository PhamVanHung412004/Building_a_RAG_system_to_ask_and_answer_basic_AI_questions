<<<<<<< HEAD
Node ID: 5aeadcb8-7bd2-4b7e-9641-0214b7c49e0e
Text: load ( self . data_path + ’/ label /{: d}. npy ’. format ( index
))) 25 depth = torch . from_numpy (np. moveaxis (np. load ( self .
data_path + ’/ depth /{: d}. npy ’. format ( index )), -1, 0)) 26 27
return { 28 ’image ’: image . float () , 29 ’ semantic ’: semantic .
float () , 30 ’depth ’: depth . float () 31 } 32 33 def __len__ ( self
): 34 ...
=======
load ( self . data_path + ’/ label /{: d}. npy ’. format (
index )))
25 depth = torch . from_numpy (np. moveaxis (np. load ( self . data_path + ’/ depth /{: d}. npy
’. format ( index )), -1, 0))
26
27 return {
28 ’image ’: image . float () ,
29 ’ semantic ’: semantic . float () ,
30 ’depth ’: depth . float ()
31 }
32
33 def __len__ ( self ):
34 return self . data_len
35
36 data_path = ’./ data / NYUDv2 ’
37 train_ds = NYUv2 ( root = data_path , train = True )
38 val_ds = NYUv2 ( root = data_path , train = False )
39
40 batch_size = 4
41 train_loader = DataLoader ( train_ds , batch_size = batch_size , shuffle = True )
42 val_loader = DataLoader ( val_ds , batch_size = batch_size , shuffle = False )
1.2. Model
Trong phần này chúng ta xây dựng mô hình hard parameter sharing được mô tả như hình 3. Trong đó,
các layer sẽ bao gồm các lớp convolution, batch normalization, activation,...
1 import torch .nn as nn
2 import torch .nn. functional as F
3
4 class HardParameterSharingModel (nn. Module ):
5 def __init__ ( self ):
6 super ( HardParameterSharingModel , self ). __init__ ()
7 # initialise network parameters
4
>>>>>>> HEAD@{1}
