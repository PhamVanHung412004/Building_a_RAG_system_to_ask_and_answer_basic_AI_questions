out_channel , self . out_channel , 3, padding =1)
152 ),
153 )
154
155 if self . out_channel == channels :
156 self . skip_connection = nn. Identity ()
157 elif use_conv :
158 self . skip_connection = nn. Conv2d (
159 channels , self . out_channel , 3, padding =1
160 )
161 else :
162 self . skip_connection = nn. Conv2d ( channels , self . out_channel , 1)
163
164 def forward (self , x, emb ):
165 """
166 Apply the block to a Tensor , conditioned on a embedding .
167 : param x: an [N x C x ...] Tensor of features .
168 : param emb : an [N x emb_channels ] Tensor of embeddings .
169 : return : an [N x C x ...] Tensor of outputs .
170 """
171 return checkpoint (
172 self . _forward , (x, emb ), self . parameters () , self . use_checkpoint
173 )
174
175 def _forward (self , x, emb ):
176 if self . updown :
177 in_rest , in_conv = self . in_layers [: -1] , self . in_layers [ -1]
178 h = in_rest (x)
179 h = self . h_upd (h)
180 x = self . x_upd (x)
181 h = in_conv (h)
182 else :
183 h = self . in_layers (x)
184 emb_out = self . emb_layers ( emb ). type (h. dtype )
185 while len ( emb_out . shape ) < len (h. shape ):
186 emb_out = emb_out [... , None ]
187 if self . use_scale_shift_norm :
188 out_norm , out_rest = self . out_layers [0] , self . 