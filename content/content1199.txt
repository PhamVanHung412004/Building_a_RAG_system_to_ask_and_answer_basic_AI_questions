model . load_state_dict ( torch . load ( self . save_model ))
73
74 epochs = 200 # 5
75 sample_num = 8
76 save_model = ’./ save_model ’
77 optimizers = { "lr": 5e -5 , " weight_decay ": 0}
78 device = " cuda " if torch . cuda . is_available () else " cpu "
79
80 unet_config = {
81 " in_channel ": 6,
82 " out_channel ": 3,
83 " inner_channel ": 64 ,
84 " channel_mults ": [1 , 2, 4, 8] ,
85 " attn_res ": [16] ,
86 " num_head_channels ": 32 ,
87 " res_blocks ": 2,
88 " dropout ": 0.2 ,
89 " image_size ": 256
90 }
91
92 beta_schedule = {
93 " schedule ": " linear ",
94 " n_timestep ": 20 ,
95 " linear_start ": 1e -4 ,
96 " linear_end ": 0.09
97 }
98 inpainting_model = InpaintingGaussianDiffusion ( unet_config , beta_schedule )
99
100 trainer = Trainer (
101 inpainting_model , optimizers , train_loader , val_loader , epochs , sample_num , device
, save_model
102 )
5. Inference
Sau quá trình huấn luyện, checkpoint của mô hình tốt nhất có thể tải về tại đây và sử dụng để sinh
ảnh mới từ ảnh mask.
1 # load model
2 inpainting_model = InpaintingGaussianDiffusion ( unet_config , beta_schedule )
3 inpainting_model . set_new_noise_schedule ( device )
4 load_state = torch . load (’./ save_model / best_model_200 . pth ’)
5 inpainting_model . load_state_dict ( load_state , strict = True )
6 inpainting_model . eval ().to( device )
7
8 # test image
9 test_imgpath = img_paths [16]
10 test_dataset = InpaintingDataset ([ test_imgpath ], mask_mode =’ center ’)
11 test_sample = next ( iter ( test_dataset ))
12
13 def inference ( model , test_sample ):
14 with torch . no_grad ():
15 output , visuals = model . restoration (
16 test_sample [’ cond_image ’]. unsqueeze (0) .to( device ),
17 y_t = test_sample [’ cond_image ’]. unsqueeze (0) .to( device ),
18 y_0 = test_sample [’ cond_image ’]. unsqueeze (0) .to( device ),
19 mask = test_sample [’mask ’]. unsqueeze (0) .to( device )
20 )
21 return output , visuals
24