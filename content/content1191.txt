randint (1 , self . num_timesteps , (b ,) , device = y_0 . device ). long ()
122 gamma_t1 = get_index_from_list ( self . gammas , t -1 , x_shape =(1 , 1))
123 sqrt_gamma_t2 = get_index_from_list ( self . gammas , t, x_shape =(1 , 1))
124 sample_gammas = ( sqrt_gamma_t2 - gamma_t1 ) * torch . rand ((b, 1) , device = y_0 .
device ) + gamma_t1
125 sample_gammas = sample_gammas . view (b, -1)
126
127 noise = noise if noise is not None else torch . randn_like ( y_0 )
128 y_noisy = self . q_sample (
129 y_0 =y_0 , sample_gammas = sample_gammas . view (-1, 1, 1, 1) , noise = noise )
130
131 if mask is not None :
132 noise_hat = self . denoise_fn ( torch . cat ([ y_cond , y_noisy * mask +(1. - mask )* y_0
], dim =1) , sample_gammas )
133 loss = self . loss_fn ( mask * noise , mask * noise_hat )
134 else :
135 noise_hat = self . denoise_fn ( torch . cat ([ y_cond , y_noisy ], dim =1) ,
sample_gammas )
136 loss = self . loss_fn ( noise , noise_hat )
137 return loss
3. Loss. Metric
Trong phần này chúng ta xây dựng hàm mất mát và độ đo đánh giá mô hình
1 import torch .nn. functional as F
2
3 def mse_loss ( output , target ):
4 return F. mse_loss ( output , target )
5
6
7 def mae ( input , target ):
8 with torch . no_grad ():
9 loss = nn. L1Loss ()
10 output = loss ( input , target )
11 return output
4. Trainer
Trong phần này chúng ta xây dựng hàm huấn luyện mô hình.
1 import time
2
3 class Trainer ():
4 def __init__ (self , model , optimizers , train_loader , val_loader , epochs , sample_num
, device , save_model ):
5 self . model = model .to( device )
6 self . optimizer = torch . 