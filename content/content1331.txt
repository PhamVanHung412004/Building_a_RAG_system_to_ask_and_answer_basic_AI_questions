<<<<<<< HEAD
Node ID: 2c68f1e7-a980-4c4e-ab68-a9f71111ad1e
Text: AI VIETNAM aivietnam.edu.vn Word Correction (Sửa lỗi chính tả)
là một trong những ứng dụng cơ bản của xử lý ngôn ngữ tự nhiên, với
mục đích xây dựng các ứng dụng nhận đầu vào là một từ, thông qua mô
hình sửa lỗi nếu từ đó bị sai thành một từ đúng. Ví dụ: người dùng
nhập vào từ ’hel’ là một từ sai, mô hình sẽ gợi ý sửa lỗi thành từ
’hello’. Để đơ...
=======
AI VIETNAM aivietnam.edu.vn
Word Correction (Sửa lỗi chính tả) là một trong những ứng dụng cơ bản của xử lý ngôn ngữ tự
nhiên, với mục đích xây dựng các ứng dụng nhận đầu vào là một từ, thông qua mô hình sửa lỗi
nếu từ đó bị sai thành một từ đúng.
Ví dụ: người dùng nhập vào từ ’hel’ là một từ sai, mô hình sẽ gợi ý sửa lỗi thành từ ’hello’. Để
đơn giản trong phần này, chúng ta sẽ sử dụng độ đo khoảng cách chỉnh sửa tối thiểu giữa hai từ,
là độ đo levenshtein. Được minh hoạ như hình trên.
Để giải quyết bài toán này, chúng ta thực hiện các bước sau để xây dựng thuật toán:
• Đầu tiên chúng ta sẽ xây dựng bộ từ điển (gọi là dictionary hoặc vocabulary). Một số từ
vựng được chuẩn bị sẵn trong file vocab.txt có thể được tải về tại đây
1 def load_vocab ( file_path ):
2 with open ( file_path , ’r’) as f:
3 lines = f. readlines ()
4 words = sorted ( set ([ line . strip (). lower () for line in lines ]))
5 return words
6 vocabs = load_vocab ( file_path =’./ vocab . txt ’)
7
• Tương ứng với mỗi từ trong từ điển, chúng ta tính khoảng cách levenshtein với từ đã có được
nhập vào bởi người dùng.
1 def levenshtein_distance ( token1 , token2 ):
2 distances = [[0]*( len ( token2 ) +1) for i in range ( len ( token1 ) +1) ]
3
4 for t1 in range ( len ( token1 ) + 1):
5 distances [t1 ][0] = t1
6
7 for t2 in range ( len ( token2 ) + 1):
8 distances [0][ t2] = t2
9
10 a = 0
11 b = 0
12 c = 0
13
14 for t1 in range (1 , len ( token1 ) + 1):
15 for t2 in range (1 , len ( token2 ) + 1):
16 if ( token1 [t1 -1] == token2 [t2 -1]) :
17 distances [t1 ][ t2] = distances [t1 - 1][ t2 - 1]
18 else :
19 a = distances [t1 ][ t2 - 1]
20 b = distances [t1 - 1][ t2]
21 c = distances [t1 - 1][ t2 - 1]
22
23 if (a <= b and a <= c):
24 distances [t1 ][ t2] = a + 1
25 elif (b <= a and b <= c):
26 distances [t1 ][ t2] = b + 1
27 else :
28 distances [t1 ][ t2] = c + 1
29
30 return distances [ len ( token1 )][ len ( token2 )]
31
• So sánh và chọn từ có khoảng cách chỉnh sửa bé nhất.
Tiếp theo, chúng ta sẽ xây dựng giao diện bằng thư viện streamlit. 
>>>>>>> HEAD@{1}
