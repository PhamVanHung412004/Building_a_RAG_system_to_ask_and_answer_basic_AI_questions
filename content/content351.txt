<<<<<<< HEAD
Node ID: 8fc2e682-ac1d-4761-adb7-2936ec04d900
Text: path . join ( self . root_dir , self . phase , folder )) 23 24
for video_path in video_paths : 25 video_folder = os. path . join ( 26
self . root_dir , self . phase , folder , video_path 27 ) 28 frames =
sorted ( 29 (os. path . join ( video_folder , f) for f in os. listdir
( video_folder )), 30 key = lambda f: int ( 31 "". join ( filter ( str
. ...
=======
path . join ( self . root_dir , self . phase ,
folder ))
23
24 for video_path in video_paths :
25 video_folder = os. path . join (
26 self . root_dir , self . phase , folder , video_path
27 )
28 frames = sorted (
29 (os. path . join ( video_folder , f) for f in os. listdir (
video_folder )),
30 key = lambda f: int (
31 "". join ( filter ( str . isdigit , os. path . basename (f)))
32 ),
33 )
34
35 if self . n_frames :
36 frames = self . _uniform_sample ( frames , self . n_frames )
37
38 videos . append ( frames )
39 labels . append ( class_id )
40
41 class_id += 1
42
43 return videos , labels
44
45 def _uniform_sample (self , frames , n_frames ):
46 """
47 Helper method to uniformly sample n_frames from the frames list .
48 """
49 stride = max (1 , len ( frames ) // n_frames )
50 sampled = [ frames [i] for i in range (0 , len ( frames ), stride )]
51 return sampled [: n_frames ]
52
53 def __len__ ( self ):
54 return len ( self . videos )
55
56 def __getitem__ (self , idx ):
57 video_frames = self . videos [ idx ]
58 label = self . labels [ idx ]
59 images = []
60 for frame_path in video_frames :
61 image = Image . open ( frame_path ). convert (" RGB ")
62 if self . transform :
63 image = self . transform ( image )
64 images . append ( image )
65
66 # Stack images along new dimension ( sequence length )
67 data = torch . stack ( images , dim =0)
5
>>>>>>> HEAD@{1}
