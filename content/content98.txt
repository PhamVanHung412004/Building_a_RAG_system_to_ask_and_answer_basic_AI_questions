linalg . norm (x) * np. linalg . norm (y)
7
8 return numerator / denominator
9
10 def window_based_matching ( left_img , right_img , disparity_range , kernel_size =5 ,
save_result = True ):
11 # Read left , right images then convert to grayscale
12 left = cv2 . imread ( left_img , 0)
13 right = cv2 . imread ( right_img , 0)
14
15 left = left . astype (np. float32 )
16 right = right . astype (np. float32 )
17
18 height , width = left . shape [:2]
19
20 # Create blank disparity map
21 depth = np. zeros (( height , width ), np. uint8 )
22 kernel_half = int (( kernel_size - 1) / 2)
23 scale = 3
24
25 for y in range ( kernel_half , height - kernel_half ):
26 for x in range ( kernel_half , width - kernel_half ):
27
28 # # Find j where cost has minimum value
29 disparity = 0
30 cost_optimal = -1
31
32 for j in range ( disparity_range ):
33 d = x - j
34 cost = -1
35 if (d - kernel_half ) > 0:
36 wp = left [(y- kernel_half ):(y+ kernel_half )+1 , (x-
kernel_half ):(x+ kernel_half ) +1]
37 wqd = right [(y- kernel_half ):(y+ kernel_half )+1 , (d-
kernel_half ):(d+ kernel_half ) +1]
38
39 wp_flattened = wp. flatten ()
40 wqd_flattened = wqd . flatten ()
41
42 cost = cosine_similarity ( wp_flattened , wqd_flattened )
43
44 if cost > cost_optimal :
45 cost_optimal = cost
46 disparity = j
47
48 # Let depth at (y, x) = j ( disparity )
11