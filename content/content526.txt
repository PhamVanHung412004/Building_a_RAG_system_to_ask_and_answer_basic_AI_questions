AI VIETNAM aivietnam.edu.vn
28 def __init__ ( self ) -> None :
29 super (). __init__ ()
30
31 def __call__ (self , pdf_files : List [ str ], ** kwargs ):
32 num_processes = min ( self . num_processes , kwargs [" workers "])
33 with multiprocessing . Pool ( processes = num_processes ) as pool :
34 doc_loaded = []
35 total_files = len ( pdf_files )
36 with tqdm ( total = total_files , desc =" Loading PDFs ", unit =" file ") as
pbar :
37 for result in pool . imap_unordered ( load_pdf , pdf_files ):
38 doc_loaded . extend ( result )
39 pbar . update (1)
40 return doc_loaded
41
42 class TextSplitter :
43 def __init__ (self ,
44 separators : List [ str ] = [’\n\n’, ’\n’, ’ ’, ’’],
45 chunk_size : int = 300 ,
46 chunk_overlap : int = 0
47 ) -> None :
48
49 self . splitter = RecursiveCharacterTextSplitter (
50 separators = separators ,
51 chunk_size = chunk_size ,
52 chunk_overlap = chunk_overlap ,
53 )
54 def __call__ (self , documents ):
55 return self . splitter . split_documents ( documents )
56
57 class Loader :
58 def __init__ (self ,
59 file_type : str = Literal [" pdf "],
60 split_kwargs : dict = {
61 " chunk_size ": 300 ,
62 " chunk_overlap ": 0}
63 ) -> None :
64 assert file_type in [" pdf "], " file_type must be pdf "
65 self . file_type = file_type
66 if file_type == " pdf ":
67 self . doc_loader = PDFLoader ()
68 else :
69 raise ValueError (" file_type must be pdf ")
70
71 self . doc_spltter = TextSplitter (** split_kwargs )
72
73 def load (self , pdf_files : Union [str , List [ str ]] , workers : int = 1):
74 if isinstance ( pdf_files , str ):
75 pdf_files = [ pdf_files ]
76 doc_loaded = self . doc_loader ( pdf_files , workers = workers )
77 doc_split = self . doc_spltter ( doc_loaded )
78 return doc_split
79
80 def load_dir (self , dir_path : str , workers : int = 1):
81 if self . file_type == " pdf ":
82 files = glob . 