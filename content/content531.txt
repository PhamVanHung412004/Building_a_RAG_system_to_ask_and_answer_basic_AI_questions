<<<<<<< HEAD
Node ID: 55206372-af74-4330-b7d5-be69fa0a0294
Text: runnables import RunnablePassthrough 4 from langchain_core .
output_parsers import StrOutputParser 5 6 class Str_OutputParser (
StrOutputParser ): 7 def __init__ ( self ) -> None : 8 super ().
__init__ () 9 10 def parse (self , text : str ) -> str : 11 return
self . extract_answer ( text ) 12 13 def extract_answer (self , 14
text_response : str ...
=======
runnables import RunnablePassthrough
4 from langchain_core . output_parsers import StrOutputParser
5
6 class Str_OutputParser ( StrOutputParser ):
7 def __init__ ( self ) -> None :
8 super (). __init__ ()
9
10 def parse (self , text : str ) -> str :
11 return self . extract_answer ( text )
12
13 def extract_answer (self ,
14 text_response : str ,
15 pattern : str = r" Answer :\s *(.*) "
16 ) -> str :
17
18 match = re. search ( pattern , text_response , re. DOTALL )
19 if match :
20 answer_text = match . group (1) . strip ()
21 return answer_text
22 else :
23 return text_response
24
25 class Offline_RAG :
26 def __init__ (self , llm ) -> None :
27 self . llm = llm
28 self . prompt = hub . pull (" rlm /rag - prompt ")
29 self . str_parser = Str_OutputParser ()
30
31 def get_chain (self , retriever ):
32 input_data = {
33 " context ": retriever | self . format_docs ,
34 " question ": RunnablePassthrough ()
35 }
36 rag_chain = (
37 input_data
38 | self . prompt
39 | self . llm
40 | self . str_parser
41 )
42 return rag_chain
43
44 def format_docs (self , docs ):
45 return "\n\n". join ( doc . 
>>>>>>> HEAD@{1}
