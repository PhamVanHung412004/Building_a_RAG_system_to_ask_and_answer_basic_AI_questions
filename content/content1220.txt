unsqueeze (0) . repeat ( num_tasks , 1, 1).to( self
. device )
40 ) # (1 , bs , bs)
41 edge_feat = sim_val + force_edge_feat # (bs , bs)
42 edge_feat = edge_feat + 1e -6 # add small value to avoid nan
43 edge_feat = edge_feat / torch . sum ( edge_feat , dim =1) . unsqueeze (1) #
normalize
44 return edge_feat , sim_val # (bs , bs), (bs , bs)
Lưu ý: edge_feat là tensor sau khi đã normalize sim_val, ta sẽ dùng sim_val để cập nhật hàm
loss cho model nên cần return về.
Tiếp theo, node network sẽ dùng edge_feat để tổng hợp thông tin. Node network sẽ dùng các giá
trị trong edge_feat để tổng hợp thông tin cho các sample, giá trị càng cao sẽ được tổng hợp càng
nhiều, và ngược lại.
1 class NodeNet (nn. Module ):
2 def __init__ (self , in_features , num_features , device , ratio =(1 ,) ):
6