AI VIETNAM aivietnam.edu.vn
136 if dim % 2:
137 embedding = torch . cat ([ embedding , torch . zeros_like ( embedding [: , :1]) ], dim = -1)
138 return embedding
1 import math
2 import torch
3 import torch .nn as nn
4 import torch .nn. functional as F
5
6 from abc import abstractmethod
7
8 class SiLU (nn. Module ):
9 def forward (self , x):
10 return x * torch . sigmoid (x)
11
12 class EmbedBlock (nn. Module ):
13 """
14 Any module where forward () takes embeddings as a second argument .
15 """
16
17 @abstractmethod
18 def forward (self , x, emb ):
19 """
20 Apply the module to ‘x‘ given ‘emb ‘ embeddings .
21 """
22
23 class EmbedSequential (nn. Sequential , EmbedBlock ):
24 """
25 A sequential module that passes embeddings to the children that
26 support it as an extra input .
27 """
28
29 def forward (self , x, emb ):
30 for layer in self :
31 if isinstance ( layer , EmbedBlock ):
32 x = layer (x, emb )
33 else :
34 x = layer (x)
35 return x
36
37 class Upsample (nn. Module ):
38 """
39 An upsampling layer with an optional convolution .
40 : param channels : channels in the inputs and outputs .
41 : param use_conv : a bool determining if a convolution is applied .
42
43 """
44
45 def __init__ (self , channels , use_conv , out_channel = None ):
46 super (). __init__ ()
47 self . channels = channels
48 self . out_channel = out_channel or channels
49 self . use_conv = use_conv
50 if use_conv :
51 self . conv = nn. 