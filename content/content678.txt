AI VIETNAM aivietnam.edu.vn
1 # Định nghĩa một class MambaTrainer kế thừa từ class Trainer.
2 class MambaTrainer(Trainer):
3
4 # Định nghĩa hàm compute_loss để tính toán hàm mất mát trong quá
trình train.
5 def compute_loss(self, model, inputs, return_outputs=False):
6 # Lấy giá trị input_ids và labels từ inputs.
7 input_ids = inputs.pop("input_ids")
8 labels = inputs.pop(’labels’)
9
10 # Gọi hàm forward của model với input_ids và labels để nhận
các kết quả.
11 outputs = model(input_ids=input_ids, labels=labels)
12
13 # Lấy giá trị loss từ kết quả của model.
14 loss = outputs.loss
15
16 # Trả về cả loss và outputs nếu return_outputs là True, ngượ
c lại chỉ trả về loss.
17 return (loss, outputs) if return_outputs else loss
18
19 # Định nghĩa hàm save_model để lưu model trong quá trình train.
20 def save_model(self, output_dir = None, _internal_call = False):
21 # Kiểm tra nếu thư mục lưu trữ không được chỉ định, sử dụng
thư mục mặc định từ đối số ’args’.
22 if output_dir is None:
23 output_dir = self.args.output_dir
24
25 # Nếu thư mục đầu ra không tồn tại, tạo mới nó.
26 if not os.path.exists(output_dir):
27 os.makedirs(output_dir)
28
29 # Lưu trạng thái của model PyTorch vào file ’pytorch_model.
bin’ trong thư mục đầu ra.
30 torch.save(self.model.state_dict(), f"{output_dir}/
pytorch_model.bin")
31
32 # Lưu trạng thái của tokenizer vào thư mục đầu ra.
33 self.tokenizer.save_pretrained(output_dir)
34
35 # Lưu cấu hình của model vào file ’config.json’ trong thư mụ
c đầu ra.
36 with open(f’{output_dir}/config.json’, ’w’) as f:
37 json.dump(self.model.config.to_dict(), f)
• Cuối cùng ta sẽ khởi tạo classMambaTrainer, đây là class chính để train model. Sau khi đã
khởi tạo thì ta chỉ cần gọitrainer.train() thì quá trình train model sẽ được tiến hành:
1 # Khởi tạo classs MambaTrainer để thực hiện quá trình train của
model.
