AI VIETNAM aivietnam.edu.vn
(d) Xây dựng hàm main cho chương trình:Cuối cùng, ta viết code nhận đầu vào là câu
hỏi từ command line, thực hiện embedding câu hỏi và chạy hàm search. Từ đó, với các tài
liệu có liên quan, ta chạy mô hình QA để trả lời câu hỏi từ input:
1 def main ():
2 parser = argparse . ArgumentParser ()
3 parser . add_argument (’-- question ’, type =str , required = True )
4 args = parser . parse_args ()
5
6 questions = {’ question ’: [f’{ args . question }’]}
7 question_dataset = Dataset . from_dict ( questions )
8
9 question_dataset = question_dataset . map (
10 tokenize_question ,
11 batched =True ,
12 batch_size = TOKENIZATION_BATCH_SIZE
13 )
14 question_dataset . set_format (
15 ’torch ’,
16 columns =[ ’ input_ids ’, ’ attention_mask ’],
17 output_all_columns = True
18 )
19 question_dataset = question_dataset . map (
20 quest_embedding ,
21 remove_columns =[ ’ input_ids ’, ’ attention_mask ’],
22 batched =True ,
23 batch_size = INFERENCE_BATCH_SIZE
24 )
25
26 retrieval_results = question_dataset . map ( search , batched =True , batch_size
=1)
27 for result in retrieval_results :
28 print ()
29 print (’Input Question :’)
30 print ( result [’ question ’])
31 print ()
32 for rank_idx , candidate in enumerate ( zip ( result [’ similar_question ’],
result [’ context ’], result [’ distance ’])):
33 context = candidate [1]
34 distance = candidate [2]. tolist ()
35 predicted_answer = qa_pipeline (
36 context = context ,
37 question = args . question
38 )
39
40 print (f’ Relevant Context Rank { rank_idx +1}: ’)
41 print (f’ Context : { context }’)
42 print (f’Score : { distance }’)
43 print (f’ Predicted Answer : { predicted_answer }’)
44 print ()
45
46 if __name__ == ’ __main__ ’:
47 main ()
48 qa_collection . release ()
Cuối cùng, chúng ta sẽ chạy file này để xem thử thành quả. 