<<<<<<< HEAD
Node ID: 401fb7ea-908e-4774-9c04-36cde073d9d3
Text: AI VIETNAM aivietnam.edu.vn 57 nn. BatchNorm2d ( num_features =
channel [1]) , 58 nn. ReLU ( inplace = True ) 59 ) 60 return
conv_block 61 62 def forward (self , x): 63 g_encoder , g_decoder ,
g_maxpool , g_upsampl , indices = ([0] * 5 for _ in range (5) ) 64 for
i in range (5) : 65 g_encoder [i], g_decoder [-i - 1] = ([0] * 2 for _
in range (2)...
=======
AI VIETNAM aivietnam.edu.vn
57 nn. BatchNorm2d ( num_features = channel [1]) ,
58 nn. ReLU ( inplace = True )
59 )
60 return conv_block
61
62 def forward (self , x):
63 g_encoder , g_decoder , g_maxpool , g_upsampl , indices = ([0] * 5 for _ in range
(5) )
64 for i in range (5) :
65 g_encoder [i], g_decoder [-i - 1] = ([0] * 2 for _ in range (2) )
66
67 # global shared encoder - decoder network
68 for i in range (5) :
69 if i == 0:
70 g_encoder [i ][0] = self . encoder_block [i](x)
71 g_encoder [i ][1] = self . conv_block_enc [i]( g_encoder [i ][0])
72 g_maxpool [i], indices [i] = self . down_sampling ( g_encoder [i ][1])
73 else :
74 g_encoder [i ][0] = self . encoder_block [i]( g_maxpool [i - 1])
75 g_encoder [i ][1] = self . conv_block_enc [i]( g_encoder [i ][0])
76 g_maxpool [i], indices [i] = self . down_sampling ( g_encoder [i ][1])
77
78 for i in range (5) :
79 if i == 0:
80 g_upsampl [i] = self . up_sampling ( g_maxpool [ -1] , indices [-i - 1])
81 g_decoder [i ][0] = self . decoder_block [-i - 1]( g_upsampl [i])
82 g_decoder [i ][1] = self . conv_block_dec [-i - 1]( g_decoder [i ][0])
83 else :
84 g_upsampl [i] = self . up_sampling ( g_decoder [i - 1][ -1] , indices [-i - 1])
85 g_decoder [i ][0] = self . decoder_block [-i - 1]( g_upsampl [i])
86 g_decoder [i ][1] = self . conv_block_dec [-i - 1]( g_decoder [i ][0])
87
88 # define task prediction layers
89 t1_pred = F. log_softmax ( self . pred_task1 ( g_decoder [i ][1]) , dim =1)
90 t2_pred = self . pred_task2 ( g_decoder [i ][1])
91
92 return {
93 ’ semantic ’: t1_pred ,
94 ’depth ’: t2_pred
95 }
1.3. Loss
Trong phần này chúng ta xây dựng hai hàm loss khác nhau cho bài toán semantic segmentation là
pixel-wise cross entropy và depth-image prediction là L1.
1 def compute_loss ( x_pred , x_output , task_type ):
2 device = x_pred . device
3
4 # binary mark to mask out undefined pixel space
5 binary_mask = ( torch . sum ( x_output , dim =1) != 0). 
>>>>>>> HEAD@{1}
