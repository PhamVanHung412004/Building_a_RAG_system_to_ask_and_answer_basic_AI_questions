append ( hit . distance )
26 questions . append ( hit . entity . get (’ question ’))
27 contexts . append ( hit . entity . get (’ context ’))
28
29 overall_id . append ( ids )
30 overall_distance . append ( distances )
31 overall_question . append ( questions )
32 overall_context . append ( contexts )
33
34 return {
35 ’id ’: overall_id ,
36 ’ distance ’: overall_distance ,
37 ’ context ’: overall_context ,
38 ’ similar_question ’: overall_question
39 }
5. Kết hợp công cụ tìm kiếm và mô hình hỏi-đáp:Khi chạy xong filebuild_dataset.py, chúng
ta đã có một vector database mong muốn. Bây giờ, để kết hợp với mô hình QA để trở thành
End-to-end QA, chúng ta sẽ viết một file code để triển khai vấn đề này. Tại đây, mình sẽ tạo một
file mới mang tênqa.py và có nội dung như sau:
(a) Import các thư viện, hàm và tham số cần thiết:
1 import argparse
2 from datasets import Dataset
3 from transformers import pipeline
4 from pymilvus import connections , utility , Collection
5 from build_database import tokenize_question , quest_embedding , search
6 from build_database import (
7 MILVUS_HOST ,
8 MILVUS_PORT ,
9 COLLECTION_NAME ,
10 REPLICA_NUMBER ,
11 TOKENIZATION_BATCH_SIZE ,
12 INFERENCE_BATCH_SIZE
13 )
Các bạn lưu ý có một số hàm và biến sẽ được import từ file codebuild_dataset.py.
(b) Kết nối tới vector database:
1 connections . 