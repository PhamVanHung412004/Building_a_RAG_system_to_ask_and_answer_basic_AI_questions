AI VIETNAM aivietnam.edu.vn
5 self . device = device
6 # define layers
7 layer_list = OrderedDict ()
8 for l in range ( len ( num_features_list )):
9 layer_list [" conv {}". format (l)] = nn. Conv2d (
10 in_channels = num_features_list [l - 1] if l > 0 else
in_features ,
11 out_channels = num_features_list [l],
12 kernel_size =1 ,
13 bias = False ,
14 )
15 layer_list [" norm {}". format (l)] = nn. BatchNorm2d (
16 num_features = num_features_list [l]
17 )
18 layer_list [" relu {}". format (l)] = nn. LeakyReLU ()
19 # add final similarity kernel
20 layer_list [" conv_out "] = nn. Conv2d (
21 in_channels = num_features_list [ -1] , out_channels =1 , kernel_size =1
22 )
23 self . sim_network = nn. Sequential ( layer_list ).to( device )
24
25 def forward (self , node_feat ):
26 node_feat = node_feat . unsqueeze ( dim =0) # (1 , bs , dim )
27 num_tasks = node_feat . size (0) # 1
28 num_data = node_feat . size (1) # bs
29 x_i = node_feat . unsqueeze (2) # (1 , bs , 1, dim )
30 x_j = torch . transpose (x_i , 1, 2) # (1 , 1, bs , dim )
31 x_ij = torch . abs ( x_i - x_j ) # (1 , bs , bs , dim )
32 x_ij = torch . transpose (x_ij , 1, 3) # (1 , dim , bs , bs)
33 # compute similarity / dissimilarity ( batch_size x feat_size x
num_samples x num_samples )
34 sim_val = (
35 torch . sigmoid ( self . sim_network ( x_ij )). squeeze (1) . 