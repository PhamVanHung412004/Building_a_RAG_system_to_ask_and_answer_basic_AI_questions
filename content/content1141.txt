<<<<<<< HEAD
Node ID: 1491a255-7a54-4a1b-8b6e-64705652bdf5
Text: ToTensor () , 39 transforms . Normalize ( mean =[0.5 , 0.5 ,
0.5] , std =[0.5 ,0.5 , 0.5]) 40 ]) 41 self . mask_mode = mask_mode 42
self . image_size = image_size 43 44 def __getitem__ (self , index ):
45 img_path = self . img_paths [ index ] 46 img = Image . open (
img_path ). convert (’RGB ’) 47 img = self . tfs ( img ) 48 mask =
self . get_ma...
=======
ToTensor () ,
39 transforms . Normalize ( mean =[0.5 , 0.5 , 0.5] , std =[0.5 ,0.5 , 0.5])
40 ])
41 self . mask_mode = mask_mode
42 self . image_size = image_size
43
44 def __getitem__ (self , index ):
45 img_path = self . img_paths [ index ]
46 img = Image . open ( img_path ). convert (’RGB ’)
47 img = self . tfs ( img )
48 mask = self . get_mask ()
49 cond_image = img *(1. - mask ) + mask * torch . randn_like ( img )
50 mask_img = img *(1. - mask ) + mask
51 return {
52 ’ gt_image ’: img ,
53 ’ cond_image ’: cond_image ,
54 ’ mask_image ’: mask_img ,
55 ’mask ’: mask ,
56 ’path ’: img_path
57 }
58
59 def __len__ ( self ):
60 return len ( self . img_paths )
61
62 def get_mask ( self ):
63 if self . mask_mode == ’ center ’:
64 h, w = self . image_size
65 mask = bbox2mask ( self . image_size , (h//4 , w//4 , h//2 , w //2) )
66
67 else :
68 raise NotImplementedError (
69 f’Mask mode { self . mask_mode } has not been implemented .’)
70 return torch . from_numpy ( mask ). permute (2 ,0 ,1)
4
>>>>>>> HEAD@{1}
